name: CI

on:
  push:
    paths:
      - ".github/workflows/ci.yml"
      - "**.cs"
  pull_request:

jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        dotnet-version: ["6.0", "8.0"]
        include:
          - os: ubuntu-latest
            dotnet-version: "6.0" # optional, if you want Ubuntu only to do 8.0, can remove 6.0
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ matrix.dotnet-version }}

      - name: Install Workloads
        run: |
          # Android workload on all platforms
          dotnet workload install android --skip-manifest-update || echo "Android workload already installed"

          # Apple workloads only on macOS
          if [[ "$RUNNER_OS" == "macOS" ]]; then
            dotnet workload install ios --skip-manifest-update || echo "iOS workload already installed"
            dotnet workload install macos --skip-manifest-update || echo "MacOS workload already installed"
            dotnet workload install maccatalyst --skip-manifest-update || echo "Mac Catalyst workload already installed"
          fi
        shell: bash

      - name: Restore Dependencies
        run: |
          dotnet restore
          dotnet workload restore || echo "No workloads to restore"

      - name: Build Solution
        run: dotnet build --configuration Release

  test:
    name: Test Examples
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        dotnet-version: ["6.0", "8.0"]
    needs: build
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ matrix.dotnet-version }}

      - name: Run Examples
        shell: bash
        run: |
          shopt -s nullglob
          for proj in examples/*/*.csproj; do
            echo "Running example: $proj"
            dotnet run --project "$proj" --configuration Release
          done

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x

      - name: Install dotnet-format
        shell: bash
        run: |
          if ! dotnet tool list -g | grep -q dotnet-format; then
            dotnet tool install -g dotnet-format
          fi
          export PATH="$PATH:$HOME/.dotnet/tools"

      - name: Run Linter
        run: dotnet format --no-restore